import dotenv from "dotenv";
dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

import { ethers } from "ethers";
import fs from "fs";
import { AgentNFT__factory } from "./contracts"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏
const provider = new ethers.JsonRpcProvider(process.env.ZEROG_RPC_URL);
const privateKey = process.env.ZEROG_PRIVATE_KEY;
const signer = new ethers.Wallet(privateKey, provider);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
const contractAddress = process.env.ZEROG_NFT_CONTRACT_ADDRESS;
const agentNFT = AgentNFT__factory.connect(contractAddress, signer);

// üîç –£–∫–∞–∂–∏ root hash –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤ 0G Storage
const proofs = [""];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
const dataDescriptions = [fs.readFileSync("./data/character_description.json", "utf8")];

// ‚úÖ –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum-–∞–¥—Ä–µ—Å!
const ownerAddress = process.env.OWNER_WALLET_ADDRESS;

async function mintMyNFT() {
    try {
        console.log("üöÄ –ú–∏–Ω—Ç–∏–º NFT...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if (!ownerAddress || !ethers.isAddress(ownerAddress)) {
            throw new Error(`‚õî –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å! –£–∫–∞–∑–∞–Ω: ${ownerAddress}`);
        }

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞ NFT
        const tx = await agentNFT.mint(proofs, dataDescriptions, ethers.getAddress(ownerAddress));
        console.log(`üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);

        // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const receipt = await tx.wait();
        console.log(`‚úÖ NFT –∑–∞–º–∏–Ω—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, Hash: ${receipt.transactionHash}`);
    } catch (error) {
        console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–Ω—Ç–∏–Ω–≥–µ NFT:", error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
mintMyNFT();


